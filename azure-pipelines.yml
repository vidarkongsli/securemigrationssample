trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: azureServiceConnection
  value: 'SECURED_MIGRATIONS_WEBAPP'
- name: location
  value: NorwayEast

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        modifyOutputPath: false
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
        projects: 'src/SecureMigrationsSample.Web/SecureMigrationsSample.Web.csproj'
        zipAfterPublish: true

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: app

- stage: Provision
  dependsOn: []
  jobs:
  - deployment: Provision
    displayName: Provision application infrastructure
    environment: production
    strategy:
      runOnce:
        deploy:
          pool:
            vmImage: windows-latest
          steps:
          - checkout: self
          - download: none
          - task: AzureResourceGroupDeployment@2
            inputs:
              azureSubscription: $(azureServiceConnection)
              action: 'Create Or Update Resource Group'
              resourceGroupName: $(resourceGroupName)
              location: $(location) 
              templateLocation: 'Linked artifact'
              csmFile: deployment/azuredeploy.json
              csmParametersFile: deployment/azuredeploy.parameters.json
              overrideParameters: -aadAdminOid $(aadAdminOid) -aadAdminLogin $(aadAdminLogin)
              deploymentMode: 'Incremental'
              deploymentOutputs: PROVISION
          - pwsh: |
              $data = ConvertFrom-Json $env:PROVISION
              Write-Host "##vso[task.setvariable variable=sqlServerAdminPassword;issecret=true]$($data.sqlServerAdminPassword.value)"
              Write-Host "##vso[task.setvariable variable=sqlServerAppPassword;issecret=true]$($data.sqlServerAppPassword.value)"
              Write-Host "##vso[task.setvariable variable=sqlServerPipelinePassword;issecret=true]$($data.sqlServerPipelinePassword.value)"
              Write-Host "##vso[task.setvariable variable=sqlServerAdminUser;]$($data.sqlServerAdminUser.value)"
              Write-Host "##vso[task.setvariable variable=sqlServerName;]$($data.sqlServerName.value)"
              Write-Host "##vso[task.setvariable variable=sqlDatabaseName;]$($data.sqlDatabaseName.value)"
          
          - task: SqlAzureDacpacDeployment@1
            displayName: Create SQL server logins
            inputs:
              azureConnectionType: 'ConnectedServiceNameARM' # Optional. Options: connectedServiceName, connectedServiceNameARM
              azureSubscription: $(azureServiceConnection)
              authenticationType: 'aadAuthenticationIntegrated' # Options: server, aadAuthenticationPassword, aadAuthenticationIntegrated, connectionString, servicePrincipal
              serverName: $(sqlServerName) # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated || AuthenticationType == servicePrincipal
              databaseName: master # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated || AuthenticationType == servicePrincipal
              deployType: 'inlineSqlTask' # Options: dacpacTask, sqlTask, inlineSqlTask
              sqlInline: | # Required when deployType == InlineSqlTask
                  IF NOT EXISTS (SELECT name FROM sys.sql_logins WHERE name='app')
                  BEGIN
                    CREATE LOGIN [app] WITH PASSWORD='$(sqlServerAppPassword)';
                  END
                  ELSE
                  BEGIN
                    ALTER LOGIN [app] WITH PASSWORD='$(sqlServerAppPassword)';
                  END;
                  IF NOT EXISTS (SELECT name FROM sys.sql_logins WHERE name='pipeline')
                  BEGIN
                    CREATE LOGIN [pipeline] WITH PASSWORD='$(sqlServerPipelinePassword)';
                  END
                  ELSE
                  BEGIN
                    ALTER LOGIN [pipeline] WITH PASSWORD='$(sqlServerPipelinePassword)';
                  END;

          # - task: SqlAzureDacpacDeployment@1
          #   displayName: Create database users
          #   inputs:
          #     azureConnectionType: 'ConnectedServiceNameARM' # Optional. Options: connectedServiceName, connectedServiceNameARM
          #     azureSubscription: $(azureServiceConnection)
          #     authenticationType: 'aadAuthenticationIntegrated' # Options: server, aadAuthenticationPassword, aadAuthenticationIntegrated, connectionString, servicePrincipal
          #     serverName: $(sqlServerName) # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated || AuthenticationType == servicePrincipal
          #     databaseName: $(sqlDatabaseName) # Required when authenticationType == Server || AuthenticationType == AadAuthenticationPassword || AuthenticationType == AadAuthenticationIntegrated || AuthenticationType == servicePrincipal
          #     deployType: 'inlineSqlTask' # Options: dacpacTask, sqlTask, inlineSqlTask
          #     sqlInline: | # Required when deployType == InlineSqlTask
          #         IF NOT EXISTS (SELECT name FROM sys.sql_logins WHERE name='app')
          #         BEGIN
          #           CREATE LOGIN [app] WITH PASSWORD='$(sqlServerAppPassword)';
          #         END
          #         ELSE
          #         BEGIN
          #           ALTER LOGIN [app] WITH PASSWORD='$(sqlServerAppPassword)';
          #         END;
          #         IF NOT EXISTS (SELECT name FROM sys.sql_logins WHERE name='pipeline')
          #         BEGIN
          #           CREATE LOGIN [pipeline] WITH PASSWORD='$(sqlServerPipelinePassword)';
          #         END
          #         ELSE
          #         BEGIN
          #           ALTER LOGIN [pipeline] WITH PASSWORD='$(sqlServerPipelinePassword)';
          #         END;

- stage: Deploy
  dependsOn: [Build,Provision]
  jobs:
  - deployment: Deploy
    displayName: Deploy application
    environment: production
    strategy:
      runOnce:
        preDeploy:
          steps:
          - download: current

          - task: ExtractFiles@1
            displayName: Extract application
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/app/*.zip'
              destinationFolder: '$(System.DefaultWorkingDirectory)/work'

          - script: |
              env ConnectionStrings:DefaultConnection="$CONN_STRING" dotnet '$(System.DefaultWorkingDirectory)/work/SecureMigrationsSample.Web.dll' --migrate --thenExit
            env:
              CONN_STRING: $(connectionString)
            displayName: Run database migrations
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy application
            inputs:
              appType: webAppLinux
              azureSubscription: $(azureServiceConnection)
              appName: 'securedmigrationssample'
              package: '$(Pipeline.Workspace)/app/*.zip'
